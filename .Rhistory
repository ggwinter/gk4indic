#     "dt_trimestre",
#     "mod_type"
#   )
# )-> t_champs
# write_csv(t_champs, here("3_tables", "t_champs.csv"))
tibble::tribble(
~champs0, ~champs,
"code_de_la_commune", "g_com_cd",
"code_de_la_region", "g_reg_cd",
"libelle_de_la_commune", "g_com_lib",
"libelle_de_la_region", "g_reg_lib",
"nb_encours_lgts_proposes_a_la_vente", "lgt_enc",
"nb_lgt_mis_en_vente", "lgt_mev",
"nb_lgt_reserves_a_la_vente", "lgt_res",
"nombre_de_pieces", "mod_nbpieces",
"prix_total_des_ventes_euros", "lgt_prixtot",
"surface_totale_m2", "lgt_surftot",
"trimestre", "dt_trimestre",
"type_de_construction", "mod_type"
) -> t_champs
purrr::map_dfr(ls_onglets, ~ dplyr::tibble(champs0 = names(.x)), .id = "onglet") %>%
dplyr::inner_join(t_champs, by = "champs0") -> t_champs0
# add a test !!!!!
purrr::map(
names(ls_onglets),
~ ls_onglets[[.x]] %>%
purrr::set_names(t_champs0 %>% dplyr::filter(onglet %in% .x) %>% dplyr::pull(champs)) %>%
dplyr::mutate(
"trim_day" = dplyr::case_when(
stringr::str_sub(dt_trimestre, 5, 5) %in% "1" ~ "03-31",
stringr::str_sub(dt_trimestre, 5, 5) %in% "2" ~ "06-30",
stringr::str_sub(dt_trimestre, 5, 5) %in% "3" ~ "09-30",
stringr::str_sub(dt_trimestre, 5, 5) %in% "4" ~ "12-31",
TRUE ~ "Pb"
),
"dt_date" = paste(stringr::str_sub(dt_trimestre, 1, 4), trim_day, sep = "-")
) %>%
dplyr::select(-trim_day) %>%
dplyr::select(
dplyr::starts_with("g_"),
dplyr::starts_with("dt_"),
dplyr::starts_with("mod_"),
dplyr::starts_with("lgt_")
)
) %>% purrr::set_names(eff) -> ls_onglets
purrr::map(ls_onglets, ~ .x %>%
dplyr::pull(dt_trimestre) %>%
max() %>%
as.character()) %>%
purrr::flatten_chr() %>%
unique() -> trim_dernier
# Requete nombre de pièces -----
ls_onglets$cor_pieces %>%
dplyr::mutate(
nb_pieces = dplyr::case_when(
stringr::str_sub(mod_nbpieces, 1, 1) == 1 ~ "t1",
stringr::str_sub(mod_nbpieces, 1, 1) == 2 ~ "t2",
stringr::str_sub(mod_nbpieces, 1, 1) == 3 ~ "t3",
stringr::str_sub(mod_nbpieces, 1, 1) == 4 ~ "t4",
stringr::str_sub(mod_nbpieces, 1, 1) == 5 ~ "t5",
stringr::str_sub(mod_nbpieces, 1, 1) == 6 ~ "t6"
)
) %>%
dplyr::select(-lgt_enc) %>%
tidyr::pivot_longer(
cols = dplyr::starts_with("lgt_"),
names_to = "indic",
values_to = "valeur"
) %>%
dplyr::group_by(dt_trimestre, dt_date, nb_pieces, indic) %>%
dplyr::summarise(valeur = sum(valeur)) -> ls_onglets$cor_nbpieces_trim
fn_extrait_tab_pieces <-
function(x = "lgt_mev", y = "nb_lgt_") {
ls_onglets$cor_nbpieces_trim %>%
dplyr::filter(indic %in% x) %>%
tidyr::pivot_wider(
names_from = nb_pieces,
names_prefix = y,
values_from = valeur
) %>%
dplyr::select(dt_trimestre, dplyr::starts_with("nb_"), dt_date) %>%
dplyr::rename(c("trimestre" = "dt_trimestre", "date" = "dt_date")) -> df_pieces
return(df_pieces)
}
noms_tab_pieces <-
stringr::str_c(
c("ECLN_mev_type_lgt_", "ECLN_resv_type_lgt_"),
stringr::str_c(stringr::str_sub(trim_dernier, 1, 4), "T", stringr::str_sub(trim_dernier, 5, 5))
)
purrr::imap(
c("lgt_mev", "lgt_res") %>% purrr::set_names(c("nb_lgt_", "nb_resa_")),
fn_extrait_tab_pieces
) %>% purrr::set_names(noms_tab_pieces) -> ls_pieces
purrr::iwalk(ls_pieces, ~ rio::export(.x, here("4_resultats", paste0(.y, ".csv"))))
# mises en vente par EPCI ------
tab_geo <- COGugaison::table_supracom_2020
# Sortir la fonction !!!
verifie_geo_manquant2 <- function(data = ls_onglets) {
ls_verif <- list()
if (exists("tab_geo") == FALSE) {
tab_geo <- COGugaison::table_supracom_2020
} # pb avec cette ligne
unique(tab_geo$CODGEO[tab_geo$REG %in% 94]) -> ls_verif$cor_com$liste
all(
purrr::map(ls_verif$cor_com$liste, ~ .x %in% data$cor_com$g_com_cd) %>% unlist() == TRUE
) -> ls_verif$cor_com$valid
purrr::transpose(ls_verif) -> ls_verif
return(ls_verif)
}
verifie_geo_manquant2() -> ls_verif
# Sortir la fonction !!!
fn_complete_table_com <- function(data = ls_onglets$cor_com) {
tidyr::expand_grid(
g_com_cd = ls_verif$liste[["cor_com"]],
dt_date = unique(data[["dt_date"]])
) -> df0
if (nrow(df0) == nrow(data)) {
x -> result
} else {
dplyr::left_join(df0, data, by = c("g_com_cd", "dt_date")) %>%
dplyr::mutate_if(
.predicate = is.numeric,
.funs = ~ tidyr::replace_na(.x, 0)
) -> result
}
return(result)
}
fn_complete_table_com() %>%
dplyr::select(g_com_cd, dt_date, lgt_mev) -> ls_onglets$cor_epci
# regroupement des communes par EPCI
#
tab_geo %>%
dplyr::filter(REG %in% "94") %>%
dplyr::tibble::as_tibble() %>%
dplyr::select(CODGEO, EPCI) %>%
dplyr::rename(c("g_com_cd" = "CODGEO", "g_epci_cd" = "EPCI")) -> tab_epci
ls_onglets$cor_epci %>%
dplyr::left_join(tab_epci, by = "g_com_cd") %>%
dplyr::group_by(g_epci_cd, dt_date) %>%
dplyr::summarise(lgt_mev = sum(lgt_mev)) %>%
tidyr::pivot_wider(
names_from = g_epci_cd,
names_prefix = "ECLN_MEV_EPCI_AG_T\u00a7",
values_from = lgt_mev
) %>%
dplyr::rename(c("date" = "dt_date")) -> ls_onglets$cor_epci
readr::write_csv(
ls_onglets$cor_epci,
here(
"4_resultats",
paste0("ECLN_MEV_EPCI_AG_T_", Sys.Date(), ".csv")
)
ls_onglets$reg_coll %>%
dplyr::filter(stringr::str_detect(mod_type, "Collectif")) %>%
dplyr::mutate(prix = round(lgt_prixtot / lgt_surftot, 0)) %>%
dplyr::select(dt_date, g_reg_cd, prix) %>%
tidyr::pivot_wider(
names_from = g_reg_cd,
names_prefix = "ECLN_PRIXM_REG_T\u00a7",
values_from = prix
) %>%
dplyr::rename(c("date" = "dt_date")) -> tab_reg_prix_appart
print("Les fichiers sont dans 4_resultats\n")
} else {
print("Copier le fichier xlsx dans 2_data et relancer/kniter le script\n")
}
fn03_transforme_requete <- function(x = "Indicateurs_ecln_trim2022.xlsx") {
# chem_dir <- here("2_data")
# fich_nom <- list.files(chem_dir, pattern = ".xlsx$") %>% str_subset("2022")
adr_fich <- file.path(getwd(), "2_data", x)
# teste existence du fichier
attempt::attempt(
file.exists(adr_fich) == FALSE,
msg = utf8::as_utf8(paste0("Le fichier ", x, "n'est pas dans 2_data"))
)
if (file.exists(file.path(getwd(), "2_data", x))) {
excel_sheets(adr_fich) %>% purrr::set_names() -> fich_onglets
purrr::map(fich_onglets, ~ read_xlsx(adr_fich, .x) %>%
janitor::clean_names()) -> ls_onglets
names(ls_onglets) -> eff
# tibble(
#   champs0 = map(ls_onglets, ~ names(.x)) %>% flatten_chr() %>% unique() %>% sort(),
#   champs = c(
#     "g_com_cd",
#     "g_reg_cd",
#     "g_com_lib",
#     "g_reg_lib",
#     "lgt_enc",
#     "lgt_mev",
#     "lgt_res",
#     "mod_nbpieces",
#     "lgt_prixtot",
#     "lgt_surftot",
#     "dt_trimestre",
#     "mod_type"
#   )
# )-> t_champs
# write_csv(t_champs, here("3_tables", "t_champs.csv"))
tibble::tribble(
~champs0, ~champs,
"code_de_la_commune", "g_com_cd",
"code_de_la_region", "g_reg_cd",
"libelle_de_la_commune", "g_com_lib",
"libelle_de_la_region", "g_reg_lib",
"nb_encours_lgts_proposes_a_la_vente", "lgt_enc",
"nb_lgt_mis_en_vente", "lgt_mev",
"nb_lgt_reserves_a_la_vente", "lgt_res",
"nombre_de_pieces", "mod_nbpieces",
"prix_total_des_ventes_euros", "lgt_prixtot",
"surface_totale_m2", "lgt_surftot",
"trimestre", "dt_trimestre",
"type_de_construction", "mod_type"
) -> t_champs
purrr::map_dfr(ls_onglets, ~ dplyr::tibble(champs0 = names(.x)), .id = "onglet") %>%
dplyr::inner_join(t_champs, by = "champs0") -> t_champs0
# add a test !!!!!
purrr::map(
names(ls_onglets),
~ ls_onglets[[.x]] %>%
purrr::set_names(t_champs0 %>% dplyr::filter(onglet %in% .x) %>% dplyr::pull(champs)) %>%
dplyr::mutate(
"trim_day" = dplyr::case_when(
stringr::str_sub(dt_trimestre, 5, 5) %in% "1" ~ "03-31",
stringr::str_sub(dt_trimestre, 5, 5) %in% "2" ~ "06-30",
stringr::str_sub(dt_trimestre, 5, 5) %in% "3" ~ "09-30",
stringr::str_sub(dt_trimestre, 5, 5) %in% "4" ~ "12-31",
TRUE ~ "Pb"
),
"dt_date" = paste(stringr::str_sub(dt_trimestre, 1, 4), trim_day, sep = "-")
) %>%
dplyr::select(-trim_day) %>%
dplyr::select(
dplyr::starts_with("g_"),
dplyr::starts_with("dt_"),
dplyr::starts_with("mod_"),
dplyr::starts_with("lgt_")
)
) %>% purrr::set_names(eff) -> ls_onglets
purrr::map(ls_onglets, ~ .x %>%
dplyr::pull(dt_trimestre) %>%
max() %>%
as.character()) %>%
purrr::flatten_chr() %>%
unique() -> trim_dernier
# Requete nombre de pièces -----
ls_onglets$cor_pieces %>%
dplyr::mutate(
nb_pieces = dplyr::case_when(
stringr::str_sub(mod_nbpieces, 1, 1) == 1 ~ "t1",
stringr::str_sub(mod_nbpieces, 1, 1) == 2 ~ "t2",
stringr::str_sub(mod_nbpieces, 1, 1) == 3 ~ "t3",
stringr::str_sub(mod_nbpieces, 1, 1) == 4 ~ "t4",
stringr::str_sub(mod_nbpieces, 1, 1) == 5 ~ "t5",
stringr::str_sub(mod_nbpieces, 1, 1) == 6 ~ "t6"
)
) %>%
dplyr::select(-lgt_enc) %>%
tidyr::pivot_longer(
cols = dplyr::starts_with("lgt_"),
names_to = "indic",
values_to = "valeur"
) %>%
dplyr::group_by(dt_trimestre, dt_date, nb_pieces, indic) %>%
dplyr::summarise(valeur = sum(valeur)) -> ls_onglets$cor_nbpieces_trim
fn_extrait_tab_pieces <-
function(x = "lgt_mev", y = "nb_lgt_") {
ls_onglets$cor_nbpieces_trim %>%
dplyr::filter(indic %in% x) %>%
tidyr::pivot_wider(
names_from = nb_pieces,
names_prefix = y,
values_from = valeur
) %>%
dplyr::select(dt_trimestre, dplyr::starts_with("nb_"), dt_date) %>%
dplyr::rename(c("trimestre" = "dt_trimestre", "date" = "dt_date")) -> df_pieces
return(df_pieces)
}
noms_tab_pieces <-
stringr::str_c(
c("ECLN_mev_type_lgt_", "ECLN_resv_type_lgt_"),
stringr::str_c(stringr::str_sub(trim_dernier, 1, 4), "T", stringr::str_sub(trim_dernier, 5, 5))
)
purrr::imap(
c("lgt_mev", "lgt_res") %>% purrr::set_names(c("nb_lgt_", "nb_resa_")),
fn_extrait_tab_pieces
) %>% purrr::set_names(noms_tab_pieces) -> ls_pieces
purrr::iwalk(ls_pieces, ~ rio::export(.x, here("4_resultats", paste0(.y, ".csv"))))
# mises en vente par EPCI ------
tab_geo <- COGugaison::table_supracom_2020
# Sortir la fonction !!!
verifie_geo_manquant2 <- function(data = ls_onglets) {
ls_verif <- list()
if (exists("tab_geo") == FALSE) {
tab_geo <- COGugaison::table_supracom_2020
} # pb avec cette ligne
unique(tab_geo$CODGEO[tab_geo$REG %in% 94]) -> ls_verif$cor_com$liste
all(
purrr::map(ls_verif$cor_com$liste, ~ .x %in% data$cor_com$g_com_cd) %>% unlist() == TRUE
) -> ls_verif$cor_com$valid
purrr::transpose(ls_verif) -> ls_verif
return(ls_verif)
}
verifie_geo_manquant2() -> ls_verif
# Sortir la fonction !!!
fn_complete_table_com <- function(data = ls_onglets$cor_com) {
tidyr::expand_grid(
g_com_cd = ls_verif$liste[["cor_com"]],
dt_date = unique(data[["dt_date"]])
) -> df0
if (nrow(df0) == nrow(data)) {
x -> result
} else {
dplyr::left_join(df0, data, by = c("g_com_cd", "dt_date")) %>%
dplyr::mutate_if(
.predicate = is.numeric,
.funs = ~ tidyr::replace_na(.x, 0)
) -> result
}
return(result)
}
fn_complete_table_com() %>%
dplyr::select(g_com_cd, dt_date, lgt_mev) -> ls_onglets$cor_epci
# regroupement des communes par EPCI
#
tab_geo %>%
dplyr::filter(REG %in% "94") %>%
tibble::as_tibble() %>%
dplyr::select(CODGEO, EPCI) %>%
dplyr::rename(c("g_com_cd" = "CODGEO", "g_epci_cd" = "EPCI")) -> tab_epci
ls_onglets$cor_epci %>%
dplyr::left_join(tab_epci, by = "g_com_cd") %>%
dplyr::group_by(g_epci_cd, dt_date) %>%
dplyr::summarise(lgt_mev = sum(lgt_mev)) %>%
tidyr::pivot_wider(
names_from = g_epci_cd,
names_prefix = "ECLN_MEV_EPCI_AG_T\u00a7",
values_from = lgt_mev
) %>%
dplyr::rename(c("date" = "dt_date")) -> ls_onglets$cor_epci
readr::write_csv(
ls_onglets$cor_epci,
here(
"4_resultats",
paste0("ECLN_MEV_EPCI_AG_T_", Sys.Date(), ".csv")
)
ls_onglets$reg_coll %>%
dplyr::filter(stringr::str_detect(mod_type, "Collectif")) %>%
dplyr::mutate(prix = round(lgt_prixtot / lgt_surftot, 0)) %>%
dplyr::select(dt_date, g_reg_cd, prix) %>%
tidyr::pivot_wider(
names_from = g_reg_cd,
names_prefix = "ECLN_PRIXM_REG_T\u00a7",
values_from = prix
) %>%
dplyr::rename(c("date" = "dt_date")) -> tab_reg_prix_appart
print("Les fichiers sont dans 4_resultats\n")
} else {
print("Copier le fichier xlsx dans 2_data et relancer/kniter le script\n")
}
library(gk4indic)
styler:::style_selection()
library(gk4indic)
styler:::set_style_transformers()
styler:::style_selection()
df = tibble(x_f = sample(x = seq(from = 3.0, to = 3.6, by = 0.00000008))
df = tibble(x_f = sample(x = seq(from = 3.0, to = 3.6, by = 0.00000005), size = 100),
y_f = sample(x = seq(from = 43.0, to = 43.6, by = 0.00000005), size = 100))
View(df)
df = tibble(x_f = sample(x = seq(from = 3.0, to = 3.6, by = 0.00000005), size = 100),
y_f = sample(x = seq(from = 43.0, to = 43.6, by = 0.00000005), size = 100))
sf_df <- sf::st_as_sf(coords = c(x_f, y_f))
df = tibble(x_f = sample(x = seq(from = 3.0, to = 3.6, by = 0.00000005), size = 100),
y_f = sample(x = seq(from = 43.0, to = 43.6, by = 0.00000005), size = 100))
sf_df <- sf::st_as_sf(coords = c("x_f", "y_f"))
sf_df <- df %>% sf::st_as_sf(coords = c("x_f", "y_f"), crs =2154)
plot(sf_df)
df[seq(from = 1, to = 100, by = 5), ]
df[seq(from = 1, to = 100, by = 5), ]$x_f <- NA
df[seq(from = 1, to = 100, by = 5), ]$y_f <- NA
sf_df2 <- df %>% sf::st_as_sf(coords = c("x_f", "y_f"), crs =2154, na.fail = FALSE)
plot(sf_df2)
View(sf_df2)
knitr::opts_chunk$set(echo = TRUE)
library(gk4indic)
tab_geo <- COGugaison::table_supracom_2020
View(tab_geo)
data(list = "DATA_SUPRACOM", package = "COGugaison", lib.loc = NULL)
COGugaison::supracom_2020
COGugaison::data(supracom_2020)
COGugaison::table_supracom_2020
fn_essai <- function(x = "table_supracom_2020"){
COGugaison::x
}
fn_essai()
fn_essai <- function(data = data(list = "DATA_SUPRACOM", package = "COGugaison", lib.loc = NULL),
x = "table_supracom_2020"){
data %>% view(x)
}
fn_essai()
fn_essai <- function(x = "table_supracom_2020"){
COGugaison::!!enquo(x)
}
fn_essai()
fn_essai <- function(x = "table_supracom_2020"){
COGugaison::!!enquo(x)
}
fn_essai <- function(x = "table_supracom_2020"){
!!enquo(x)
}
fn_essai()
fn_essai <- function(x = "table_supracom_2020"){
!!rlang::enquo(x)
}
fn_essai()
fn_essai <- function(x = "table_supracom_2020"){
!!rlang::quo_name(x)
}
fn_essai()
fn_essai <- function(x = "table_supracom_2020"){
quo(x)-> quo_x
!!rlang::enquo(quo_x)
}
fn_essai()
fn_essai <- function(x = "table_supracom_2020"){
rlang::quo(x)-> quo_x
!!rlang::enquo(quo_x)
}
fn_essai()
fn_essai <- function(x = "table_supracom_2020"){
unquote(x)
}
fn_essai()
fn_essai <- function(x = "table_supracom_2020"){
rlang::ensim(x)
}
fn_essai()
fn_essai <- function(x = "table_supracom_2020"){
ensim(x)
}
fn_essai()
fn_essai <- function(x = "table_supracom_2020"){
rlang::{{ x rlang::}}
}
fn_essai()
fn_essai <- function(x = "table_supracom_2020"){
{{ x rlang::}}
}
COGugaison::table_supracom_2020
View(params)
fn_essai <- function(x = "table_supracom_2020"){
{{ x }}
}
fn_essai()
fn_essai <- function(x = "table_supracom_2020"){
COGugaison::{{ x }}
}
fn_essai()
data("table_supracom_2020", package = "COGugaison", lib.loc = NULL)
data(list = "DATA_SUPRACOM$table_supracom_2020", package = "COGugaison", lib.loc = NULL)
COGugaison::"table_supracom_2020"
fn_essai <- function(x = "table_supracom_2020"){
COGugaison::x
}
fn_essai()
fn_essai <- function(x = "table_supracom_2020"){
eval(x)
}
fn_essai()
fn_essai <- function(x = "table_supracom_2020"){
eval(COGugaison::x)
}
fn_essai()
fn_essai <- function(x = "table_supracom_2020"){
substitute(COGugaison::x)
}
fn_essai()
fn_essai <- function(x = "table_supracom_2020"){
eval(substitute(COGugaison::x))
}
fn_essai()
fn_essai <- function(x = "table_supracom_2020"){
eval(substitute(COGugaison::x))-> tab_geo
return(tab_geo)
}
fn_essai()
fn99_utilitaire_importFrom("fn05_complete_table_communes.R")
fn99_utilitaire_importFrom <- function(x = 'fn06_met_en_forme_liste.R') {
# list.files(file.path("R"), pattern =".R")
readLines(file.path("R", x))-> txt
stringr::str_extract_all(txt, "[:word:]*::[:word:].{3,15}(?=\\()") %>% as.list() -> extract
extract[which(purrr::map(extract, length) != 0) %>% unlist()] %>% unlist() %>%
unique() %>% sort() %>% stringr::str_replace(., "::", " ")-> extract
return(extract)
}
fn99_utilitaire_importFrom("fn05_complete_table_communes.R")
library(dplyr)
fn99_utilitaire_importFrom("fn05_complete_table_communes.R")
library(gk4indic)
prefixer:::prefixer()
library(gk4indic)
fn99_utilitaire_importFrom <- function(x = 'fn06_met_en_forme_liste.R') {
# list.files(file.path("R"), pattern =".R")
readLines(file.path("R", x))-> txt
stringr::str_extract_all(txt, "[:word:]*::[:word:].{3,15}(?=\\()") %>% as.list() -> extract
extract[which(purrr::map(extract, length) != 0) %>% unlist()] %>% unlist() %>%
unique() %>% sort() %>% stringr::str_replace(., "::", " ")-> extract
return(extract)
}
fn99_utilitaire_importFrom("fn06_table_epci.R")
library(gk4indic)
prefixer:::prefixer()
library(gk4indic)
